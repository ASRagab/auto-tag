#!/usr/bin/env bash
# AutoTag application.
#
# MIT License
#
# Copyright (c) 2020 MichaelCurrin
#
# https://github.com/MichaelCurrin/auto-tag/blob/master/LICENSE

FALLBACK_TAG='v0.0.0'

USAGE='USAGE: autotag LEVEL [-p] [-h]'
HELP="$USAGE

Increment git tag using given increment level.

Positional arguments:
    LEVEL       : 'M' for major, 'm' for minor or 'b' for bug.

Flags:
    -h --help   : Show help and exit.
    -p --preview: Dry run to show new tag label and not actually create it.
"

if [[ "$#" -eq 0 ]] || [[ "$1" == '-h' ]] || [[ "$1" == '--help' ]]; then
    echo "$HELP"
    exit 1
fi
LEVEL_CHOICE=$1

if [[ "$2" ]]; then
    if [[ "$2" == '-p' ]] || [[ "$2" == '--preview' ]]; then
        PREVIEW=true
    else
        echo "Invalid arguments: \"$*\""
        echo
        echo "$USAGE"
        exit 1
    fi
else
    PREVIEW=false
fi

case $LEVEL_CHOICE in
"M")
    ((MAJOR += 1))
    MINOR=0
    BUG=0
    ;;
"m")
    ((MINOR += 1))
    BUG=0
    ;;
"b")
    ((BUG += 1))
    ;;
*)
    echo "Invalid arguments: \"$*\""
    echo
    echo "$USAGE"
    exit 1
    ;;
esac

echo 'Fetching tags...'

git fetch --tags

echo 'Finding last tag...'

LAST_TAG=$(git describe --abbrev=0 --tags 2>/dev/null)
LAST_TAG=${LAST_TAG:-$FALLBACK_TAG}
LAST_TAG="${LAST_TAG/v/}"

# Replace dot with space then split into array.
LAST_TAG_ARR=(${LAST_TAG//./ })

MAJOR=${LAST_TAG_ARR[0]}
MINOR=${LAST_TAG_ARR[1]}
BUG=${LAST_TAG_ARR[2]}

echo "Last tag: v$MAJOR.$MINOR.$BUG"

NEW_TAG="v$MAJOR.$MINOR.$BUG"
echo "New tag: $NEW_TAG"

if [[ "$PREVIEW" == true ]]; then
    echo 'Skipping tag creation'
else
    echo "Creating annotated tag..."
    git tag -a $NEW_TAG -m $NEW_TAG
fi
